function z = spline2_eval( x, y, c, d, knots_x, knots_y )

x_size = size(x);

if min(x_size)>1
	xs = x(:,1);
	ys = y(1,:);

	[x2, y2] = ndgrid(xs, ys);
	assert(all(x2(:) == x(:)) && all(y2(:) == y(:)), 'x and y should be generated by ndgrid');
	clear x2 y2
	
	[xind, yind] = ndgrid(1:numel(xs), 1:numel(ys));
	xind = xind(:);
	yind = yind(:);
else
	xs = x(:);
	ys = y(:);
	xind = 1:numel(xs);
	yind = 1:numel(xs);
end

xmin = knots_x(1);
xmax = knots_x(end);
tx = [repmat(xmin, [1, d]), knots_x, repmat(xmax, [1, d])];

ymin = knots_y(1);
ymax = knots_y(end);
ty = [repmat(ymin, [1, d]), knots_y, repmat(ymax, [1, d])];

ncoeff_x = numel(knots_x) + d - 1;
ncoeff_y = numel(knots_y) + d - 1;
B = zeros(numel(x), ncoeff_x*ncoeff_y);

bspline_x = zeros(numel(xs), ncoeff_x);
bspline_y = zeros(numel(ys), ncoeff_y);

parfor j = 1 : ncoeff_x
	bspline_x(:, j) = bspline(xs, j, d, tx, d);
end

parfor k = 1 : ncoeff_y
	bspline_y(:,k) = bspline(ys, k, d, ty, d);
end	

for j = 1 : ncoeff_x
    for k = 1 : ncoeff_y
        B(:, (j - 1)*ncoeff_y + k) = bspline_x(xind, j).*bspline_y(yind, k);
    end
end

z = B*c;
z = reshape(z, x_size);